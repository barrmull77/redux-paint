{"ast":null,"code":"export const drawStroke = (context, points, color) => {\n  if (!points.length) {\n    return;\n  }\n\n  context.strokeStyle = color;\n  context.beginPath();\n  context.moveTo(points[0].x, points[0].y);\n  points.forEach(point => {\n    context.lineTo(point.x, point.y);\n    context.stroke();\n  });\n  context.closePath();\n};\nexport const clearCanvas = canvas => {\n  const context = canvas.getContext(\"2d\");\n\n  if (!context) {\n    return;\n  }\n\n  context.fillStyle = \"white\";\n  context.fillRect(0, 0, canvas.width, canvas.height);\n};\nexport const setCanvasSize = (canvas, width, height) => {\n  var _canvas$getContext;\n\n  canvas.width = width * 2;\n  canvas.height = height * 2;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n  (_canvas$getContext = canvas.getContext(\"2d\")) === null || _canvas$getContext === void 0 ? void 0 : _canvas$getContext.scale(2, 2);\n};\nexport const getCanvasImage = canvas => {\n  return new Promise((resolve, reject) => {\n    if (!canvas) {\n      return reject(null);\n    }\n\n    canvas.toBlob(resolve);\n  });\n};","map":{"version":3,"sources":["/Users/user/Documents/code-projects/redux-paint/src/canvasUtils.ts"],"names":["drawStroke","context","points","color","length","strokeStyle","beginPath","moveTo","x","y","forEach","point","lineTo","stroke","closePath","clearCanvas","canvas","getContext","fillStyle","fillRect","width","height","setCanvasSize","style","scale","getCanvasImage","Promise","resolve","reject","toBlob"],"mappings":"AAEA,OAAO,MAAMA,UAAU,GAAG,CACxBC,OADwB,EAExBC,MAFwB,EAGxBC,KAHwB,KAIrB;AACH,MAAI,CAACD,MAAM,CAACE,MAAZ,EAAoB;AAClB;AACD;;AACDH,EAAAA,OAAO,CAACI,WAAR,GAAsBF,KAAtB;AACAF,EAAAA,OAAO,CAACK,SAAR;AACAL,EAAAA,OAAO,CAACM,MAAR,CAAeL,MAAM,CAAC,CAAD,CAAN,CAAUM,CAAzB,EAA4BN,MAAM,CAAC,CAAD,CAAN,CAAUO,CAAtC;AACAP,EAAAA,MAAM,CAACQ,OAAP,CAAgBC,KAAD,IAAW;AACxBV,IAAAA,OAAO,CAACW,MAAR,CAAeD,KAAK,CAACH,CAArB,EAAwBG,KAAK,CAACF,CAA9B;AACAR,IAAAA,OAAO,CAACY,MAAR;AACD,GAHD;AAIAZ,EAAAA,OAAO,CAACa,SAAR;AACD,CAhBM;AAkBP,OAAO,MAAMC,WAAW,GAAIC,MAAD,IAA+B;AACxD,QAAMf,OAAO,GAAGe,MAAM,CAACC,UAAP,CAAkB,IAAlB,CAAhB;;AACA,MAAI,CAAChB,OAAL,EAAc;AACZ;AACD;;AACDA,EAAAA,OAAO,CAACiB,SAAR,GAAoB,OAApB;AACAjB,EAAAA,OAAO,CAACkB,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBH,MAAM,CAACI,KAA9B,EAAqCJ,MAAM,CAACK,MAA5C;AACD,CAPM;AASP,OAAO,MAAMC,aAAa,GAAG,CAC3BN,MAD2B,EAE3BI,KAF2B,EAG3BC,MAH2B,KAIxB;AAAA;;AACHL,EAAAA,MAAM,CAACI,KAAP,GAAeA,KAAK,GAAG,CAAvB;AACAJ,EAAAA,MAAM,CAACK,MAAP,GAAgBA,MAAM,GAAG,CAAzB;AACAL,EAAAA,MAAM,CAACO,KAAP,CAAaH,KAAb,GAAsB,GAAEA,KAAM,IAA9B;AACAJ,EAAAA,MAAM,CAACO,KAAP,CAAaF,MAAb,GAAuB,GAAEA,MAAO,IAAhC;AACA,wBAAAL,MAAM,CAACC,UAAP,CAAkB,IAAlB,2EAAyBO,KAAzB,CAA+B,CAA/B,EAAkC,CAAlC;AACD,CAVM;AAYP,OAAO,MAAMC,cAAc,GACzBT,MAD4B,IAEH;AACzB,SAAO,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAI,CAACZ,MAAL,EAAa;AACX,aAAOY,MAAM,CAAC,IAAD,CAAb;AACD;;AACDZ,IAAAA,MAAM,CAACa,MAAP,CAAcF,OAAd;AACD,GALM,CAAP;AAMD,CATM","sourcesContent":["import { Point } from \"./types\"\n\nexport const drawStroke = (\n  context: CanvasRenderingContext2D,\n  points: Point[],\n  color: string\n) => {\n  if (!points.length) {\n    return\n  }\n  context.strokeStyle = color\n  context.beginPath()\n  context.moveTo(points[0].x, points[0].y)\n  points.forEach((point) => {\n    context.lineTo(point.x, point.y)\n    context.stroke()\n  })\n  context.closePath()\n}\n\nexport const clearCanvas = (canvas: HTMLCanvasElement) => {\n  const context = canvas.getContext(\"2d\")\n  if (!context) {\n    return\n  }\n  context.fillStyle = \"white\"\n  context.fillRect(0, 0, canvas.width, canvas.height)\n}\n\nexport const setCanvasSize = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number\n) => {\n  canvas.width = width * 2\n  canvas.height = height * 2\n  canvas.style.width = `${width}px`\n  canvas.style.height = `${height}px`\n  canvas.getContext(\"2d\")?.scale(2, 2)\n}\n\nexport const getCanvasImage = (\n  canvas: HTMLCanvasElement | null\n): Promise<null | Blob> => {\n  return new Promise((resolve, reject) => {\n    if (!canvas) {\n      return reject(null)\n    }\n    canvas.toBlob(resolve)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}