{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/code-projects/redux-paint/src/App.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { beginStroke, endStroke, updateStroke } from \"./actions\";\nimport { drawStroke, clearCanvas, setCanvasSize } from \"./canvasUtils\";\nimport { EditPanel } from \"./shared/EditPanel\";\nimport { ColorPanel } from \"./shared/ColorPanel\";\nimport { currentStrokeSelector } from \"./modules/currentStroke/selectors\";\nimport { strokesSelector } from \"./modules/strokes/selectors\";\nimport { historyIndexSelector } from \"./modules/historyIndex/selectors\";\nimport { FilePanel } from \"./shared/FilePanel\";\nimport { useCanvas } from \"./CanvasContext\";\nconst WIDTH = 1024;\nconst HEIGHT = 768;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const canvasRef = useCanvas();\n  const isDrawing = useSelector(state => !!state.currentStroke.points.length);\n  const historyIndex = useSelector(historyIndexSelector);\n  const strokes = useSelector(strokesSelector);\n  const currentStroke = useSelector(currentStrokeSelector);\n\n  const getCanvasWithContext = (canvas = canvasRef.current) => {\n    return {\n      canvas,\n      context: canvas === null || canvas === void 0 ? void 0 : canvas.getContext(\"2d\")\n    };\n  };\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    dispatch(beginStroke(offsetX, offsetY));\n  };\n\n  useEffect(() => {\n    const {\n      context\n    } = getCanvasWithContext();\n\n    if (!context) {\n      return;\n    }\n\n    requestAnimationFrame(() => drawStroke(context, currentStroke.points, currentStroke.color));\n  }, [currentStroke]);\n\n  const endDrawing = () => {\n    if (isDrawing) {\n      dispatch(endStroke(historyIndex, currentStroke));\n    }\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    dispatch(updateStroke(offsetX, offsetY));\n  };\n\n  useEffect(() => {\n    const {\n      canvas,\n      context\n    } = getCanvasWithContext();\n\n    if (!context || !canvas) {\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      clearCanvas(canvas);\n      strokes.slice(0, strokes.length - historyIndex).forEach(stroke => {\n        drawStroke(context, stroke.points, stroke.color);\n      });\n    });\n  }, [historyIndex]);\n  useEffect(() => {\n    const {\n      canvas,\n      context\n    } = getCanvasWithContext();\n\n    if (!canvas || !context) {\n      return;\n    }\n\n    setCanvasSize(canvas, WIDTH, HEIGHT);\n    context.lineJoin = \"round\";\n    context.lineCap = \"round\";\n    context.lineWidth = 5;\n    context.strokeStyle = \"black\";\n    clearCanvas(canvas);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-bar-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Redux Paint\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-bar-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    \"aria-label\": \"Close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(EditPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ColorPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FilePanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    onMouseDown: startDrawing,\n    onMouseUp: endDrawing,\n    onMouseOut: endDrawing,\n    onMouseMove: draw,\n    ref: canvasRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/user/Documents/code-projects/redux-paint/src/App.tsx"],"names":["React","useEffect","useDispatch","useSelector","beginStroke","endStroke","updateStroke","drawStroke","clearCanvas","setCanvasSize","EditPanel","ColorPanel","currentStrokeSelector","strokesSelector","historyIndexSelector","FilePanel","useCanvas","WIDTH","HEIGHT","App","dispatch","canvasRef","isDrawing","state","currentStroke","points","length","historyIndex","strokes","getCanvasWithContext","canvas","current","context","getContext","startDrawing","nativeEvent","offsetX","offsetY","requestAnimationFrame","color","endDrawing","draw","slice","forEach","stroke","lineJoin","lineCap","lineWidth","strokeStyle"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,YAAjC,QAAqD,WAArD;AAEA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,aAAlC,QAAuD,eAAvD;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,qBAAT,QAAsC,mCAAtC;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,MAAMC,KAAK,GAAG,IAAd;AACA,MAAMC,MAAM,GAAG,GAAf;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,QAAQ,GAAGlB,WAAW,EAA5B;AACA,QAAMmB,SAAS,GAAGL,SAAS,EAA3B;AACA,QAAMM,SAAS,GAAGnB,WAAW,CAC1BoB,KAAD,IAAW,CAAC,CAACA,KAAK,CAACC,aAAN,CAAoBC,MAApB,CAA2BC,MADb,CAA7B;AAGA,QAAMC,YAAY,GAAGxB,WAAW,CAG9BW,oBAH8B,CAAhC;AAIA,QAAMc,OAAO,GAAGzB,WAAW,CACzBU,eADyB,CAA3B;AAGA,QAAMW,aAAa,GAAGrB,WAAW,CAG/BS,qBAH+B,CAAjC;;AAIA,QAAMiB,oBAAoB,GAAG,CAACC,MAAM,GAAGT,SAAS,CAACU,OAApB,KAAgC;AAC3D,WAAO;AAAED,MAAAA,MAAF;AAAUE,MAAAA,OAAO,EAAEF,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEG,UAAR,CAAmB,IAAnB;AAAnB,KAAP;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,CAAC;AACpBC,IAAAA;AADoB,GAAD,KAEsB;AACzC,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAuBF,WAA7B;AACAf,IAAAA,QAAQ,CAAChB,WAAW,CAACgC,OAAD,EAAUC,OAAV,CAAZ,CAAR;AACD,GALD;;AAOApC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAE+B,MAAAA;AAAF,QAAcH,oBAAoB,EAAxC;;AACA,QAAI,CAACG,OAAL,EAAc;AACZ;AACD;;AACDM,IAAAA,qBAAqB,CAAC,MACpB/B,UAAU,CAACyB,OAAD,EAAUR,aAAa,CAACC,MAAxB,EAAgCD,aAAa,CAACe,KAA9C,CADS,CAArB;AAGD,GARQ,EAQN,CAACf,aAAD,CARM,CAAT;;AAUA,QAAMgB,UAAU,GAAG,MAAM;AACvB,QAAIlB,SAAJ,EAAe;AACbF,MAAAA,QAAQ,CAACf,SAAS,CAACsB,YAAD,EAAeH,aAAf,CAAV,CAAR;AACD;AACF,GAJD;;AAMA,QAAMiB,IAAI,GAAG,CAAC;AACZN,IAAAA;AADY,GAAD,KAE8B;AACzC,QAAI,CAACb,SAAL,EAAgB;AACd;AACD;;AACD,UAAM;AAAEc,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAuBF,WAA7B;AAEAf,IAAAA,QAAQ,CAACd,YAAY,CAAC8B,OAAD,EAAUC,OAAV,CAAb,CAAR;AACD,GATD;;AAWApC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAE6B,MAAAA,MAAF;AAAUE,MAAAA;AAAV,QAAsBH,oBAAoB,EAAhD;;AACA,QAAI,CAACG,OAAD,IAAY,CAACF,MAAjB,EAAyB;AACvB;AACD;;AACDQ,IAAAA,qBAAqB,CAAC,MAAM;AAC1B9B,MAAAA,WAAW,CAACsB,MAAD,CAAX;AAEAF,MAAAA,OAAO,CACJc,KADH,CACS,CADT,EACYd,OAAO,CAACF,MAAR,GAAiBC,YAD7B,EAEGgB,OAFH,CAEYC,MAAD,IAAY;AACnBrC,QAAAA,UAAU,CAACyB,OAAD,EAAUY,MAAM,CAACnB,MAAjB,EAAyBmB,MAAM,CAACL,KAAhC,CAAV;AACD,OAJH;AAKD,KARoB,CAArB;AASD,GAdQ,EAcN,CAACZ,YAAD,CAdM,CAAT;AAgBA1B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAE6B,MAAAA,MAAF;AAAUE,MAAAA;AAAV,QAAsBH,oBAAoB,EAAhD;;AACA,QAAI,CAACC,MAAD,IAAW,CAACE,OAAhB,EAAyB;AACvB;AACD;;AAEDvB,IAAAA,aAAa,CAACqB,MAAD,EAASb,KAAT,EAAgBC,MAAhB,CAAb;AAEAc,IAAAA,OAAO,CAACa,QAAR,GAAmB,OAAnB;AACAb,IAAAA,OAAO,CAACc,OAAR,GAAkB,OAAlB;AACAd,IAAAA,OAAO,CAACe,SAAR,GAAoB,CAApB;AACAf,IAAAA,OAAO,CAACgB,WAAR,GAAsB,OAAtB;AAEAxC,IAAAA,WAAW,CAACsB,MAAD,CAAX;AACD,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,kBAAW,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF,eAOE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAQE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eASE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAUE;AACE,IAAA,WAAW,EAAEI,YADf;AAEE,IAAA,SAAS,EAAEM,UAFb;AAGE,IAAA,UAAU,EAAEA,UAHd;AAIE,IAAA,WAAW,EAAEC,IAJf;AAKE,IAAA,GAAG,EAAEpB,SALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAoBD;;AAED,eAAeF,GAAf","sourcesContent":["import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { beginStroke, endStroke, updateStroke } from \"./actions\"\nimport { RootState } from \"./types\"\nimport { drawStroke, clearCanvas, setCanvasSize } from \"./canvasUtils\"\nimport { EditPanel } from \"./shared/EditPanel\"\nimport { ColorPanel } from \"./shared/ColorPanel\"\nimport { currentStrokeSelector } from \"./modules/currentStroke/selectors\"\nimport { strokesSelector } from \"./modules/strokes/selectors\"\nimport { historyIndexSelector } from \"./modules/historyIndex/selectors\"\nimport { FilePanel } from \"./shared/FilePanel\"\nimport { useCanvas } from \"./CanvasContext\"\n\nconst WIDTH = 1024\nconst HEIGHT = 768\n\nfunction App() {\n  const dispatch = useDispatch()\n  const canvasRef = useCanvas()\n  const isDrawing = useSelector<RootState>(\n    (state) => !!state.currentStroke.points.length\n  )\n  const historyIndex = useSelector<\n    RootState,\n    RootState[\"historyIndex\"]\n  >(historyIndexSelector)\n  const strokes = useSelector<RootState, RootState[\"strokes\"]>(\n    strokesSelector\n  )\n  const currentStroke = useSelector<\n    RootState,\n    RootState[\"currentStroke\"]\n  >(currentStrokeSelector)\n  const getCanvasWithContext = (canvas = canvasRef.current) => {\n    return { canvas, context: canvas?.getContext(\"2d\") }\n  }\n\n  const startDrawing = ({\n    nativeEvent\n  }: React.MouseEvent<HTMLCanvasElement>) => {\n    const { offsetX, offsetY } = nativeEvent\n    dispatch(beginStroke(offsetX, offsetY))\n  }\n\n  useEffect(() => {\n    const { context } = getCanvasWithContext()\n    if (!context) {\n      return\n    }\n    requestAnimationFrame(() =>\n      drawStroke(context, currentStroke.points, currentStroke.color)\n    )\n  }, [currentStroke])\n\n  const endDrawing = () => {\n    if (isDrawing) {\n      dispatch(endStroke(historyIndex, currentStroke))\n    }\n  }\n\n  const draw = ({\n    nativeEvent\n  }: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing) {\n      return\n    }\n    const { offsetX, offsetY } = nativeEvent\n\n    dispatch(updateStroke(offsetX, offsetY))\n  }\n\n  useEffect(() => {\n    const { canvas, context } = getCanvasWithContext()\n    if (!context || !canvas) {\n      return\n    }\n    requestAnimationFrame(() => {\n      clearCanvas(canvas)\n\n      strokes\n        .slice(0, strokes.length - historyIndex)\n        .forEach((stroke) => {\n          drawStroke(context, stroke.points, stroke.color)\n        })\n    })\n  }, [historyIndex])\n\n  useEffect(() => {\n    const { canvas, context } = getCanvasWithContext()\n    if (!canvas || !context) {\n      return\n    }\n\n    setCanvasSize(canvas, WIDTH, HEIGHT)\n\n    context.lineJoin = \"round\"\n    context.lineCap = \"round\"\n    context.lineWidth = 5\n    context.strokeStyle = \"black\"\n\n    clearCanvas(canvas)\n  }, [])\n\n  return (\n    <div className=\"window\">\n      <div className=\"title-bar\">\n        <div className=\"title-bar-text\">Redux Paint</div>\n        <div className=\"title-bar-controls\">\n          <button aria-label=\"Close\" />\n        </div>\n      </div>\n      <EditPanel />\n      <ColorPanel />\n      <FilePanel />\n      <canvas\n        onMouseDown={startDrawing}\n        onMouseUp={endDrawing}\n        onMouseOut={endDrawing}\n        onMouseMove={draw}\n        ref={canvasRef}\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}